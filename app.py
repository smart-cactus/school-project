import base64
from io import BytesIO

import matplotlib.pyplot as plt
import numpy as np
from flask import Flask, render_template, request

app = Flask(__name__)

materials_properties_SI = {
    "Иридий": {
        "плотность (кг/м³)": 22560,
        "теплопроводность (Вт/(м·К))": 147,
        "удельная теплоёмкость (Дж/(кг·К))": 0.132,
    },
    "Платина": {
        "плотность (кг/м³)": 21450,
        "теплопроводность (Вт/(м·К))": 71,
        "удельная теплоёмкость (Дж/(кг·К))": 0.129,
    },
    "Золото": {
        "плотность (кг/м³)": 19320,
        "теплопроводность (Вт/(м·К))": 315,
        "удельная теплоёмкость (Дж/(кг·К))": 0.129,
    },
    "Вольфрам": {
        "плотность (кг/м³)": 19250,
        "теплопроводность (Вт/(м·К))": 173,
        "удельная теплоёмкость (Дж/(кг·К))": 0.134,
    },
    "Серебро": {
        "плотность (кг/м³)": 10490,
        "теплопроводность (Вт/(м·К))": 429,
        "удельная теплоёмкость (Дж/(кг·К))": 0.235,
    },
    "Медь": {
        "плотность (кг/м³)": 8960,
        "теплопроводность (Вт/(м·К))": 401,
        "удельная теплоёмкость (Дж/(кг·К))": 0.385,
    },
    "Никель": {
        "плотность (кг/м³)": 8900,
        "теплопроводность (Вт/(м·К))": 90.7,
        "удельная теплоёмкость (Дж/(кг·К))": 0.444,
    },
    "Латунь": {
        "плотность (кг/м³)": 8400,
        "теплопроводность (Вт/(м·К))": 120,
        "удельная теплоёмкость (Дж/(кг·К))": 0.385,
    },
    "Сталь": {
        "плотность (кг/м³)": 7850,
        "теплопроводность (Вт/(м·К))": 50,
        "удельная теплоёмкость (Дж/(кг·К))": 0.490,
    },
    "Железо": {
        "плотность (кг/м³)": 7870,
        "теплопроводность (Вт/(м·К))": 80,
        "удельная теплоёмкость (Дж/(кг·К))": 0.450,
    },
    "Олово": {
        "плотность (кг/м³)": 7310,
        "теплопроводность (Вт/(м·К))": 66,
        "удельная теплоёмкость (Дж/(кг·К))": 0.210,
    },
    "Цинк": {
        "плотность (кг/м³)": 7140,
        "теплопроводность (Вт/(м·К))": 116,
        "удельная теплоёмкость (Дж/(кг·К))": 0.387,
    },
    "Чугун": {
        "плотность (кг/м³)": 6800,
        "теплопроводность (Вт/(м·К))": 50,
        "удельная теплоёмкость (Дж/(кг·К))": 0.460,
    },
    "Алмаз": {
        "плотность (кг/м³)": 3510,
        "теплопроводность (Вт/(м·К))": 2000,
        "удельная теплоёмкость (Дж/(кг·К))": 0.500,
    },
    "Алюминий": {
        "плотность (кг/м³)": 2700,
        "теплопроводность (Вт/(м·К))": 235,
        "удельная теплоёмкость (Дж/(кг·К))": 0.897,
    },
    "Мрамор": {
        "плотность (кг/м³)": 2650,
        "теплопроводность (Вт/(м·К))": 2.5,
        "удельная теплоёмкость (Дж/(кг·К))": 0.880,
    },
    "Гранит": {
        "плотность (кг/м³)": 2750,
        "теплопроводность (Вт/(м·К))": 3.5,
        "удельная теплоёмкость (Дж/(кг·К))": 0.790,
    },
    "Стекло": {
        "плотность (кг/м³)": 2500,
        "теплопроводность (Вт/(м·К))": 1.0,
        "удельная теплоёмкость (Дж/(кг·К))": 0.840,
    },
    "Бетон": {
        "плотность (кг/м³)": 2400,
        "теплопроводность (Вт/(м·К))": 1.7,
        "удельная теплоёмкость (Дж/(кг·К))": 0.840,
    },
    "Фарфор": {
        "плотность (кг/м³)": 2400,
        "теплопроводность (Вт/(м·К))": 1.2,
        "удельная теплоёмкость (Дж/(кг·К))": 1.000,
    },
    "Графит": {
        "плотность (кг/м³)": 2200,
        "теплопроводность (Вт/(м·К))": 150,
        "удельная теплоёмкость (Дж/(кг·К))": 1.600,
    },
    "Лёд": {
        "плотность (кг/м³)": 920,
        "теплопроводность (Вт/(м·К))": 2.2,
        "удельная теплоёмкость (Дж/(кг·К))": 2.090,
    },
    "Парафин": {
        "плотность (кг/м³)": 800,
        "теплопроводность (Вт/(м·К))": 0.2,
        "удельная теплоёмкость (Дж/(кг·К))": 2.100,
    },
    "Дуб (сухой)": {
        "плотность (кг/м³)": 750,
        "теплопроводность (Вт/(м·К))": 0.1,
        "удельная теплоёмкость (Дж/(кг·К))": 2.300,
    },
    "Берёза (сухая)": {
        "плотность (кг/м³)": 650,
        "теплопроводность (Вт/(м·К))": 0.1,
        "удельная теплоёмкость (Дж/(кг·К))": 2.500,
    },
    "Пробка": {
        "плотность (кг/м³)": 240,
        "теплопроводность (Вт/(м·К))": 0.04,
        "удельная теплоёмкость (Дж/(кг·К))": 1.200,
    },
    "Платиноиридиевый сплав": {
        "плотность (кг/м³)": 21450,
        "теплопроводность (Вт/(м·К))": 70,
        "удельная теплоёмкость (Дж/(кг·К))": 0,
    },
    "Свинец": {
        "плотность (кг/м³)": 11340,
        "теплопроводность (Вт/(м·К))": 35,
        "удельная теплоёмкость (Дж/(кг·К))": 0,
    },
    "Ртуть": {
        "плотность (кг/м³)": 13560,
        "теплопроводность (Вт/(м·К))": 8.3,
        "удельная теплоёмкость (Дж/(кг·К))": 0,
    },
    "Мёд": {
        "плотность (кг/м³)": 1420,
        "теплопроводность (Вт/(м·К))": 0.5,
        "удельная теплоёмкость (Дж/(кг·К))": 0,
    },
    "Глицерин": {
        "плотность (кг/м³)": 1260,
        "теплопроводность (Вт/(м·К))": 0.2,
        "удельная теплоёмкость (Дж/(кг·К))": 0,
    },
    "Вода": {
        "плотность (кг/м³)": 1000,
        "теплопроводность (Вт/(м·К))": 0.569,
        "удельная теплоёмкость (Дж/(кг·К))": 4200,
    },
}

materials = list(materials_properties_SI.keys())


class HeatTransfer:
    def __init__(self, area):
        self.area = area

    def conduction(self, k, delta_T, d):
        Q = k * self.area * (delta_T / d)
        return Q


@app.route("/", methods=["GET", "POST"])
def index():
    plot_url_1 = None
    plot_url_2 = None
    selected_material = None
    conduction_result = None
    if request.method == "POST":
        # Получаем данные из формы
        material1 = request.form.get("material1")
        area = float(request.form.get("area"))
        d = float(request.form.get("d"))
        T1 = float(request.form.get("T1"))
        T2 = float(request.form.get("T2"))

        if material1 in materials:
            selected_material = material1
            k = materials_properties_SI[material1]["теплопроводность (Вт/(м·К))"]
            density = materials_properties_SI[material1]["плотность (кг/м³)"]
            specific_heat = materials_properties_SI[material1][
                "удельная теплоёмкость (Дж/(кг·К))"
            ]

            delta_T = abs(T1 - T2)
            heat_transfer = HeatTransfer(area)
            Q_conduction = heat_transfer.conduction(k, delta_T, d)
            conduction_result = f"Теплопередача по проводимости: {Q_conduction:.2f} Вт"

            V = area * d
            T0 = T1
            T1_env = T2
            T = T1_env + 0.9 * (T0 - T1_env)  # конечная температура тела — 90% приближение
            try:
                ln_part = np.log((T - T1_env) / (T0 - T1_env))
                t = (-density * specific_heat * V) / (k * area) * ln_part
            except ValueError:
                t = None  # если логарифм невалиден (например, деление на 0 или отрицательное значение)

            # Визуализация графика теплопередачи по проводимости
            plt.figure(figsize=(12, 6))
            T = np.linspace(0, 100, 100)
            plt.plot(
                T,
                np.linspace(0, Q_conduction, 100),
                label="Теплопередача по проводимости",
                color="red",
            )
            plt.title("Теплопередача")
            plt.xlabel("Разница температур (К)")
            plt.ylabel("Тепловой поток (Вт)")
            plt.legend()
            plt.grid()
            plt.xlim(0, 100)

            img = BytesIO()
            plt.savefig(img, format="png")
            img.seek(0)
            plot_url_1 = base64.b64encode(img.getvalue()).decode()
            plt.close()

            # Визуализация графика изменения температуры во времени
            plt.figure(figsize=(12, 6))
            dT = np.linspace(T1, T2, 100)
            plt.plot(
                np.linspace(0, t, 100), dT, label="Температура во времени", color="blue"
            )
            plt.title("Изменение температуры")
            plt.xlabel("Время (с)")
            plt.ylabel("Температура тела (К)")
            plt.legend()
            plt.grid()

            img = BytesIO()
            plt.savefig(img, format="png")
            img.seek(0)
            plot_url_2 = base64.b64encode(img.getvalue()).decode()
            plt.close()

    return render_template(
        "index.html",
        plot_url_1=plot_url_1,
        plot_url_2=plot_url_2,
        materials=materials,
        selected_material=selected_material,
        conduction_result=conduction_result,
    )


if __name__ == "__main__":
    app.run(debug=True)